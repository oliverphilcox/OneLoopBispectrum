#!/usr/bin/env wolframscript
(* ::Package:: *)

(* ::Text:: *)
(*This  script combines the various output bispectrum files generated by the "Spectra.wls" and "SpectraFlat.wls" scripts into two HDF5 files that can be easily handled. The script can be run as "./Output.wls" (or from Mathematica) and will crash if any of the necessary files have not been computed.*)


(* ::Subsubsection::Closed:: *)
(*Options*)


(* Input Directory *)
indir="/scratch/ophilcox/OneLoopBispectrum/output";
(* File string *)
string="ptc";

SetDirectory[indir];
fullfile = ToString[StringForm["``_full.h5",string]];
flatfile = ToString[StringForm["``_flat.h5",string]];
Print["Input directory: ",indir];
Print["Full filename: ",fullfile];
Print["Flat filename: ",flatfile];


(* ::Subsubsection::Closed:: *)
(*Compute array of angular powers*)


(* Define angular powers *)
Clear[\[Mu],\[Chi]];
\[Mu]pow={};
For[i=0,i<=12,i++,
For[j=0,j<=10,j++,
If[i+j>12,Continue[]];
If[OddQ[i+j],Continue[]];
\[Mu]pow=Join[\[Mu]pow,{\[Mu]^i \[Chi]^j}]]];

(* Repeat for flattened triangles *)
\[Mu]powFlat={};
For[i=0,i<=12,i++,
If[OddQ[i],Continue[]];
\[Mu]powFlat=Join[\[Mu]powFlat,{\[Mu]^i}]];


(* ::Subsubsection::Closed:: *)
(*Define k / x / y values*)


(* ::Text:: *)
(*This reads in *)


(* Create function to safely import files *)
SafeImport[filename_]:=If[FileExistsQ[filename],Import[filename],Print["File ",filename, " does not exist; exiting!"]; Exit[1]]

Print["Loading k, x, y"];
kxy=SafeImport[ToString[StringForm["``_k_x_y.wdx",string]]];
kk=kxy[[1]];
xx=kxy[[2]];
yy=kxy[[3]];
Print[StringForm["Full: Nk ``, Nx / Ny = ``",Length[kk],Length[xx]]];
kxyFlat=Import["ptcFlat_rsd_k_x_y.wdx"];
kkFlat=kxyFlat[[1]];
xxFlat=kxyFlat[[2]];
yyFlat=kxyFlat[[3]];
Print[StringForm["Flat: Nk = ``, Nx / Ny = ``",Length[kkFlat],Length[xxFlat]]];


(* ::Subsubsection::Closed:: *)
(*Load full shapes*)


(* ::Text:: *)
(*Below, we load each full bispectrum template, stored as a .wdx file. We additionally combine the two choices of bias for B321-I.*)


b211s={};
b222s={};
b321Is={};
b321IIs={};
b411s={};
Print["Loading full shapes"];
For[muindex=1,muindex<=Length[\[Mu]pow],muindex++,
Print["On index: ",muindex];
(* Load B211 *)
b211s=Join[b211s,{SafeImport[ToString[StringForm["``_b211_m``.wdx",string,muindex]]]}];
(* Load B222 *)
b222s=Join[b222s,{SafeImport[ToString[StringForm["``_b222_nu-0.6_m``.wdx",string,muindex]]]}];
(* Load B321I and use matter biases for b1-only terms *)
b321Itab=SafeImport[ToString[StringForm["``_b321I_nu-0.8_m``.wdx",string,muindex]]];
b321Itab2=SafeImport[ToString[StringForm["``_b321I_nu-0.3_m``.wdx",string,muindex]]];For[i=1,i<=Length[matterBiasPos],i++,b321Itab[[All,All,matterBiasPos[[i]]]]=b321Itab2[[All,All,i]]];
b321Is=Join[b321Is,{b321Itab}];
(* Load B321II *)
b321IIs=Join[b321IIs,{SafeImport[ToString[StringForm["``_b321II_nu-0.6_m``.wdx",string,muindex]]]}];
(* Load B411 *)
b411s=Join[b411s,{SafeImport[ToString[StringForm["``_b411_nu-0.3_m``.wdx",string,muindex]]]}];
];


(* ::Subsubsection::Closed:: *)
(*Load flat shapes*)


(* ::Text:: *)
(*We repeat this for flattened bispectra, iterating over the 7 mu bins.*)


b211sFlat={};
b222sFlat={};
b321IsFlat={};
b321IIsFlat={};
b411sFlat={};
Print["Loading flattened shapes"];
For[muindex=1,muindex<=Length[\[Mu]powFlat],muindex++,
Print["On index: ",muindex];
(* Load B211 *)
b211sFlat=Join[b211sFlat,{SafeImport[ToString[StringForm["``-flat_b211_m``.wdx",string,muindex]]]}];
(* Load B222 *)
b222sFlat=Join[b222sFlat,{SafeImport[ToString[StringForm["``-flat_b222_nu-0.6_m``.wdx",string,muindex]]]}];
(* Load B321I and use matter biases for b1-only terms *)
b321Itab=SafeImport[ToString[StringForm["``-flat_b321I_nu-0.8_m``.wdx",string,muindex]]];
b321Itab2=SafeImport[ToString[StringForm["``-flat_b321I_nu-0.3_m``.wdx",string,muindex]]];For[i=1,i<=Length[matterBiasPos],i++,b321Itab[[All,All,matterBiasPos[[i]]]]=b321Itab2[[All,All,i]]];
b321IsFlat=Join[b321IsFlat,{b321Itab}];
(* Load B321II *)
b321IIsFlat=Join[b321IIsFlat,{SafeImport[ToString[StringForm["``-flat_b321II_nu-0.6_m``.wdx",string,muindex]]]}];
(* Load B411 *)
b411sFlat=Join[b411sFlat,{SafeImport[ToString[StringForm["``-flat_b411_nu-0.3_m``.wdx",string,muindex]]]}];
];


(* ::Subsubsection::Closed:: *)
(*Save combined spectra*)


(* ::Text:: *)
(*Finally, we output two HDF5 files containing all the spectra, which can be used for interpolation.*)


Print["Exporting total flat shape to ",flatfile];
Export[flatfile,{b211sFlat,b222sFlat,b321IsFlat,b321IIsFlat,b411sFlat,kkFlat,xxFlat,yyFlat},{"Datasets",{"211","222","321I","321II","411","k","x","y"}}]

Print["Exporting total full shape to ",fullfile];
Export[fullfile,{b211s,b222s,b321Is,b321IIs,b411s,kk,xx,yy},{"Datasets",{"211","222","321I","321II","411","k","x","y"}}]

Print["Finished!"];



